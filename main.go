package main

import (
	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/widget"
)

var (
	reconSteps       = 10 // Change this to the total number of reconnaissance steps
	analyzeSteps     = 10 // Change this to the total number of analyze steps
	reconCompleted   int
	analyzeCompleted int
)

func reconnaissance() {
	reconCompleted = 0
}

func analyseVulnerabilites() {
	analyzeCompleted = 0
}

func main() {
	a := app.New()
	w := a.NewWindow("Pentest Recap")
	w.Resize(fyne.NewSize(1000, 800))

	progressBar := widget.NewProgressBar()

	acceuil := container.NewVBox(
		widget.NewLabel("Bienvenue dans l'outil de récapitulation des étapes de pentest !"),
		canvas.NewImageFromFile("./up.png"),
	)

	// Create checkboxes for each step of the reconnaissance
	reconCheckboxes := make([]fyne.CanvasObject, reconSteps)
	for i := 0; i < reconSteps; i++ {
		//step := i + 1
		reconCheckboxes[i] = widget.NewCheck(`Étape`, func(checked bool) {
			if checked {
				reconCompleted++
			} else {
				reconCompleted--
			}
			updateProgressBar(progressBar)
		})
	}

	// Create checkboxes for each step of the analyse
	analyzeCheckboxes := make([]fyne.CanvasObject, analyzeSteps)
	for i := 0; i < analyzeSteps; i++ {
		//step := i + 1
		analyzeCheckboxes[i] = widget.NewCheck("Étape ", func(checked bool) {
			if checked {
				analyzeCompleted++
			} else {
				analyzeCompleted--
			}
			updateProgressBar(progressBar)
		})
	}

	reconContent := container.NewVBox(
		widget.NewLabel("Page de la Reconnaissance"),
	)
	for _, checkbox := range reconCheckboxes {
		reconContent.Add(checkbox)
	}

	analyzeContent := container.NewVBox(
		widget.NewLabel("Page de l'Analyse des vulnérabilités"),
	)

	for _, checkbox := range analyzeCheckboxes {
		analyzeContent.Add(checkbox)
	}

	tabs := container.NewAppTabs(
		container.NewTabItem("Accueil", container.NewVScroll(acceuil)),
		container.NewTabItem("Reconnaissance", container.NewVScroll(reconContent)),
		container.NewTabItem("Analyse des vulnérabilités", container.NewVScroll(analyzeContent)),
	)

	mainLayout := container.NewHBox(tabs)

	w.SetContent(mainLayout)
	w.ShowAndRun()
}

func updateProgressBar(progressBar *widget.ProgressBar) {
	totalSteps := reconSteps + analyzeSteps // Change this if you have more steps

	completedSteps := reconCompleted + analyzeCompleted

	progress := float64(completedSteps) / float64(totalSteps)
	progressBar.SetValue(progress)
}
